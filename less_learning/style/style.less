// 变量以@声明
@color: red;
@width: 1;
.mycolor {
    color: @color;
    width: percentage(@width);
}

// 变量的用法
// 获取选择器的名字
@my-selcetor: banner; // 使用
.@{my-selcetor} {
    font-weight: bold;
    line-height: 40px;
    margin: 0 auto;
}

// 变量存储URL
@images: "../img";
body {
    color: #444;
    background: url("@{images}/white-sand.png");
}

// 导入
@import "./style11.less";
// 和变量一起使用
@themes: "../../src/themes";
// Usage
// @import "@{themes}/tidal-wave.less";
// 原型
@property: color;
.widget {
    @{property}: #0ee;
    background-@{property}: #999;
}

//  新特性
.widget {
    color: #efefef;
    background-color: $color;
}

/* example 混合(嵌套使用) */

/* 相当于代码块方便重复使用*/

.bordered {
    border-top: dotted 1px black;
    border-bottom: solid 2px black;
}

#menu a {
    color: #111;
    .bordered;
}

.post a {
    color: red;
    .bordered;
}

// 带参数混合
// 相当于函数
.border-radius(@radius) {
    border-radius: @radius;
    -moz-border-radius: @radius;
    -webkit-border-radius: @radius;
}

//在其他的class快中嵌套调用
#header {
    .border-radius(4px);
}

.button {
    .border-radius(6px);
}

// 对参数赋值使用
.border-radius(@radius: 5px) {
    border-radius: @radius;
    -moz-border-radius: @radius;
    -webkit-border-radius: @radius;
}

#header {
    .border-radius;
}

// 不带参数
.wrap() {
    text-wrap: wrap;
    white-space: pre-wrap;
    white-space: -moz-pre-wrap;
    word-wrap: break-word;
}

.pre {
    .wrap;
}

/* @arguments 变量 @arguments包含了所有传递进来的参数. 如果你不想单独处理每一个参数的话就可以像这样写: */

.box-shadow(@x: 0,
@y: 0,
@blur: 1px,
@color: #000) {
    -moz-box-shadow: @arguments;
    -webkit-box-shadow: @arguments;
}

.urt {
    .box-shadow(2px,
    5px);
}

/*
switch用法
模式匹配和导引表达式
有些情况下，我们想根据传入的参数来改变混合的默认呈现
 */

// 模板：
// .mixin (@s,
// @color) {
//     ...
// }

// .class {
//     .mixin(@switch,
//     #888);
// }

/* 先写出可能匹配到的情况 */
.mixin(dark,@color){
    color: darken(@color,10%);
}
.mixin(light,@color){
    color:lighten(@color,10%)
}
.mixin(@_,@color){
    display: block;
}

@switch:light;
.class {
    .mixin(@switch, #888);
}

/* 这是一个class 函数（命名空间） */
.class1 {
    .class2 {
        .val(@param) {
            font-size: @param;
            color: green;
        }
    }
}

.myclass {
    .class1>.class2>.val(20px);
}

/* 变量的作用域
 优先级为：本地作用域大于父级作用域 */
@var: @a;
@a: 15px;
.myclass {
    font-size: @var;
    @a: 20px;
    color: green;
}